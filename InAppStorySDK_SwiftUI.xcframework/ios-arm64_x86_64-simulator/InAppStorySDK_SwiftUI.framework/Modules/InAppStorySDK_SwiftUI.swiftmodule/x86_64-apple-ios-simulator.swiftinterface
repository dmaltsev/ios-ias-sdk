// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios13.4-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name InAppStorySDK_SwiftUI
import AVFoundation
import AudioToolbox
import Combine
import CommonCrypto
import Compression
import CoreFoundation
import CoreHaptics
import CoreText
import Foundation
@_exported import InAppStorySDK_SwiftUI
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import os
public struct PhoneFormat {
  public let phoneFormat: Swift.String
  public let regexp: Swift.String
  public init(defaultPhoneFormat: Swift.String)
  public init(phoneFormat: Swift.String, regexp: Swift.String)
}
extension SwiftUI.View {
  public func onboardingStories(feed: Swift.String? = nil, tags: [Swift.String]? = nil, panelSettings: InAppStorySDK_SwiftUI.PanelSettings? = nil, isPresented: SwiftUI.Binding<Swift.Bool>, onDismiss: (() -> Swift.Void)? = nil, onAction: ((_ target: Swift.String, _ type: InAppStorySDK_SwiftUI.ActionType) -> Swift.Void)? = nil, goodsObjects: ((_ skus: Swift.Array<Swift.String>, _ complete: (Swift.Result<Swift.Array<InAppStorySDK_SwiftUI.GoodsObjectProtocol>, InAppStorySDK_SwiftUI.GoodsFailure>) -> Swift.Void) -> Swift.Void)? = nil, selectGoodsItem: ((_ item: InAppStorySDK_SwiftUI.GoodsObjectProtocol) -> Swift.Void)? = nil) -> some SwiftUI.View
  
  public func singleStory(storyID: Swift.String, panelSettings: InAppStorySDK_SwiftUI.PanelSettings? = nil, isPresented: SwiftUI.Binding<Swift.Bool>, onDismiss: (() -> Swift.Void)? = nil, onAction: ((_ target: Swift.String, _ type: InAppStorySDK_SwiftUI.ActionType) -> Swift.Void)? = nil, goodsObjects: ((_ skus: Swift.Array<Swift.String>, _ complete: (Swift.Result<Swift.Array<InAppStorySDK_SwiftUI.GoodsObjectProtocol>, InAppStorySDK_SwiftUI.GoodsFailure>) -> Swift.Void) -> Swift.Void)? = nil, selectGoodsItem: ((_ item: InAppStorySDK_SwiftUI.GoodsObjectProtocol) -> Swift.Void)? = nil) -> some SwiftUI.View
  
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func applyTransform(withScale scale: CoreGraphics.CGFloat, anchorPoint: CoreGraphics.CGPoint)
}
public struct WidgetStory {
  public let id: Swift.String
  public let title: Swift.String
  public let image: Swift.String
  public let color: Swift.String
}
public let StoriesLoaded: Foundation.Notification.Name
public let ClickOnStory: Foundation.Notification.Name
public let ShowStory: Foundation.Notification.Name
public let CloseStory: Foundation.Notification.Name
public let ClickOnButton: Foundation.Notification.Name
public let ShowSlide: Foundation.Notification.Name
public let LikeStory: Foundation.Notification.Name
public let DislikeStory: Foundation.Notification.Name
public let FavoriteStory: Foundation.Notification.Name
public let ClickOnShareStory: Foundation.Notification.Name
public let StartGame: Foundation.Notification.Name
public let CloseGame: Foundation.Notification.Name
public let FinishGame: Foundation.Notification.Name
public let SessionFailure: Foundation.Notification.Name
public let StoryFailure: Foundation.Notification.Name
public let CurrentStoryFailure: Foundation.Notification.Name
public let NetworkFailure: Foundation.Notification.Name
public struct Settings : Swift.Equatable {
  public var userID: Swift.String
  public var tags: Swift.Array<Swift.String> {
    get
    set
  }
  public init(userID: Swift.String, tags: Swift.Array<Swift.String> = [String]())
  public static func == (lhs: InAppStorySDK_SwiftUI.Settings, rhs: InAppStorySDK_SwiftUI.Settings) -> Swift.Bool
}
public struct PanelSettings {
  public var like: Swift.Bool
  public var favorites: Swift.Bool
  public var share: Swift.Bool
  public init(like: Swift.Bool = false, favorites: Swift.Bool = false, share: Swift.Bool = false)
}
@objc @_inheritsConvenienceInitializers public class InAppStory : ObjectiveC.NSObject {
  public static var shared: InAppStorySDK_SwiftUI.InAppStory
  public static let VersionSDK: Swift.String
  public static let BuildSDK: Swift.String
  public static var frameworkInfo: Swift.String {
    get
  }
  public var settings: InAppStorySDK_SwiftUI.Settings? {
    get
    set
  }
  public var favoritesCount: Swift.Int {
    get
  }
  public var widgetStories: [InAppStorySDK_SwiftUI.WidgetStory]
  public var sslPinningHashKeys: [Swift.String]?
  public var coverQuality: InAppStorySDK_SwiftUI.Quality
  public var showCellTitle: Swift.Bool
  public var cellBorderRadius: CoreGraphics.CGFloat
  public var cellBorderColor: UIKit.UIColor
  public var goodsCellMainTextColor: UIKit.UIColor
  public var goodsCellDiscountTextColor: UIKit.UIColor
  public var cellFont: UIKit.UIFont
  public var goodCellTitleFont: UIKit.UIFont
  public var goodCellSubtitleFont: UIKit.UIFont
  public var goodCellPriceFont: UIKit.UIFont
  public var goodCellDiscountFont: UIKit.UIFont
  public var timerGradientEnable: Swift.Bool
  public var swipeToClose: Swift.Bool
  public var overScrollToClose: Swift.Bool
  public var placeholderElementColor: UIKit.UIColor
  public var placeholderBackgroundColor: UIKit.UIColor
  public var goodsCloseBackgroundColor: UIKit.UIColor
  public var goodsSubstrateColor: UIKit.UIColor
  public var gamePlaceholderTint: UIKit.UIColor
  public var likeImage: UIKit.UIImage
  public var likeSelectedImage: UIKit.UIImage
  public var dislikeImage: UIKit.UIImage
  public var dislikeSelectedImage: UIKit.UIImage
  public var favoriteImage: UIKit.UIImage
  public var favoriteSelectedImag: UIKit.UIImage
  public var shareImage: UIKit.UIImage
  public var shareSelectedImage: UIKit.UIImage
  public var soundImage: UIKit.UIImage
  public var soundSelectedImage: UIKit.UIImage
  public var closeReaderImage: UIKit.UIImage
  public var refreshImage: UIKit.UIImage
  public var refreshGoodsImage: UIKit.UIImage
  public var goodsCloseImage: UIKit.UIImage
  public var panelSettings: InAppStorySDK_SwiftUI.PanelSettings?
  @available(*, deprecated, message: "Please use 'InAppStory.shared.panelSettings'. In v1.16.0 the 'likePanel' parameter will be removed.")
  public var likePanel: Swift.Bool
  @available(*, deprecated, message: "Please use 'InAppStory.shared.panelSettings'. In v1.16.0 the 'favoritePanel' parameter will be removed.")
  public var favoritePanel: Swift.Bool
  @available(*, deprecated, message: "Please use 'InAppStory.shared.panelSettings'. In v1.16.0 the 'sharePanel' parameter will be removed.")
  public var sharePanel: Swift.Bool
  public var goodCell: InAppStorySDK_SwiftUI.GoodsCellProtocol?
  public var placeholderView: InAppStorySDK_SwiftUI.PlaceholderProtocol?
  public var gamePlaceholderView: InAppStorySDK_SwiftUI.GamePlaceholderProtocol?
  public var goodsView: InAppStorySDK_SwiftUI.CustomGoodsView?
  public var goodsDelegateFlowLayout: InAppStorySDK_SwiftUI.GoodsDelegateFlowLayout?
  public var closeButtonPosition: InAppStorySDK_SwiftUI.ClosePosition
  public var scrollStyle: InAppStorySDK_SwiftUI.ScrollStyle
  public var presentationStyle: InAppStorySDK_SwiftUI.PresentationStyle
  public var muted: Swift.Bool {
    get
    set
  }
  public var placeholders: [Swift.String : Swift.String] {
    get
    set
  }
  public var isReaderOpen: Swift.Bool {
    get
  }
  public var isLoggingEnabled: Swift.Bool
  public func initWith(serviceKey: Swift.String, testKey: Swift.String? = nil, settings: InAppStorySDK_SwiftUI.Settings? = nil, sandBox: Swift.Bool = false)
  public func setTags(_ tags: Swift.Array<Swift.String>)
  public func addTags(_ addedTags: Swift.Array<Swift.String>)
  public func removeTags(_ removingTags: Swift.Array<Swift.String>)
  public func getWidgetStories(complete: @escaping (Swift.Array<InAppStorySDK_SwiftUI.WidgetStory>?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
extension InAppStorySDK_SwiftUI.InAppStory {
  public func clearMemory()
  public func clearCache()
  public func closeReader(complete: @escaping () -> Swift.Void)
}
extension InAppStorySDK_SwiftUI.InAppStory {
  public func showOnboardings(feed: Swift.String = "onboarding", from target: UIKit.UIViewController, with tags: [Swift.String]? = nil, delegate: InAppStorySDK_SwiftUI.InAppStoryDelegate, with panelSettings: InAppStorySDK_SwiftUI.PanelSettings? = nil, complete: @escaping (_ show: Swift.Bool) -> Swift.Void)
}
extension InAppStorySDK_SwiftUI.InAppStory {
  public func showSingle(with id: Swift.String, from target: UIKit.UIViewController, delegate: InAppStorySDK_SwiftUI.InAppStoryDelegate, with panelSettings: InAppStorySDK_SwiftUI.PanelSettings? = nil, complete: @escaping (_ show: Swift.Bool) -> Swift.Void)
}
extension InAppStorySDK_SwiftUI.InAppStory {
  public func removeFromFavorite(with storyID: Swift.String)
  public func removeAllFavorites()
}
@_Concurrency.MainActor(unsafe) public struct StoryListView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(feed: Swift.String? = nil, isFavorite: Swift.Bool = false, panelSettings: InAppStorySDK_SwiftUI.PanelSettings? = nil, onUpdated: ((_ isContent: Swift.Bool) -> Swift.Void)? = nil, onAction: ((_ target: Swift.String, _ actionType: InAppStorySDK_SwiftUI.ActionType) -> Swift.Void)? = nil, onDismiss: (() -> Swift.Void)? = nil, favoritesSelect: (() -> Swift.Void)? = nil, getGoodsObjects: ((_ skus: Swift.Array<Swift.String>, _ complete: (Swift.Result<Swift.Array<InAppStorySDK_SwiftUI.GoodsObjectProtocol>, InAppStorySDK_SwiftUI.GoodsFailure>) -> Swift.Void) -> Swift.Void)? = nil, selectGoodsItem: ((_ item: InAppStorySDK_SwiftUI.GoodsObjectProtocol) -> Swift.Void)? = nil, refresh: SwiftUI.Binding<Swift.Bool> = .constant(false))
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s21InAppStorySDK_SwiftUI0C8ListViewV4bodyQrvp", 0) __
}
extension InAppStorySDK_SwiftUI.StoryListView {
  @_Concurrency.MainActor(unsafe) public func edgeInserts(_ inserts: UIKit.UIEdgeInsets) -> InAppStorySDK_SwiftUI.StoryListView
  @_Concurrency.MainActor(unsafe) public func itemsSize(_ size: CoreGraphics.CGSize) -> InAppStorySDK_SwiftUI.StoryListView
  @_Concurrency.MainActor(unsafe) public func lineSpacing(_ spacing: CoreGraphics.CGFloat) -> InAppStorySDK_SwiftUI.StoryListView
  @_Concurrency.MainActor(unsafe) public func interitemSpacing(_ spacing: CoreGraphics.CGFloat) -> InAppStorySDK_SwiftUI.StoryListView
  @_Concurrency.MainActor(unsafe) public func setStoryCell(customCell: InAppStorySDK_SwiftUI.StoryCellProtocol) -> InAppStorySDK_SwiftUI.StoryListView
  @_Concurrency.MainActor(unsafe) public func setFavoriteCell(customCell: InAppStorySDK_SwiftUI.FavoriteCellProtocol) -> InAppStorySDK_SwiftUI.StoryListView
}
@_hasMissingDesignatedInitializers final public class ConfigurationRepo {
  final public var defaultConfiguration: InAppStorySDK_SwiftUI.PhoneFormat
  final public func add(format: InAppStorySDK_SwiftUI.PhoneFormat)
  @objc deinit
}
public protocol GoodsObjectProtocol : ObjectiveC.NSObjectProtocol {
  var sku: Swift.String! { get set }
}
@objc public class GoodObject : ObjectiveC.NSObject, InAppStorySDK_SwiftUI.GoodsObjectProtocol {
  public var sku: Swift.String!
  public var title: Swift.String?
  public var subtitle: Swift.String?
  public var imageURL: Foundation.URL?
  public var price: Swift.String?
  public var discount: Swift.String?
  public init(sku: Swift.String, title: Swift.String?, subtitle: Swift.String?, imageURL: Foundation.URL?, price: Swift.String?, discount: Swift.String?)
  @objc deinit
}
public protocol GoodsDelegateFlowLayout : ObjectiveC.NSObjectProtocol {
  func sizeForItem() -> CoreGraphics.CGSize
  func insetForSection() -> UIKit.UIEdgeInsets
  func minimumLineSpacingForSection() -> CoreGraphics.CGFloat
}
extension InAppStorySDK_SwiftUI.GoodsDelegateFlowLayout {
  public func sizeForItem() -> CoreGraphics.CGSize
  public func insetForSection() -> UIKit.UIEdgeInsets
  public func minimumLineSpacingForSection() -> CoreGraphics.CGFloat
}
public func MD5(_ input: Swift.String) -> Swift.String
public protocol StoryCellProtocol : UIKit.UICollectionViewCell {
  static var reuseIdentifier: Swift.String { get }
  static var nib: UIKit.UINib? { get }
  var storyID: Swift.String! { get set }
  func setTitle(_ text: Swift.String)
  func setImageURL(_ url: Foundation.URL)
  func setVideoURL(_ url: Foundation.URL)
  func setOpened(_ value: Swift.Bool)
  func setHighlight(_ value: Swift.Bool)
  func setBackgroundColor(_ color: UIKit.UIColor)
  func setTitleColor(_ color: UIKit.UIColor)
  func setSound(_ value: Swift.Bool)
}
public protocol StoryViewDelegateFlowLayout : ObjectiveC.NSObjectProtocol {
  func sizeForItem() -> CoreGraphics.CGSize
  func insetForSection() -> UIKit.UIEdgeInsets
  func minimumLineSpacingForSection() -> CoreGraphics.CGFloat
  func minimumInteritemSpacingForSection() -> CoreGraphics.CGFloat
}
public protocol PlaceholderProtocol : UIKit.UIView {
  var isAnimate: Swift.Bool { get }
  func start()
  func stop()
}
@objc public enum ClosePosition : Swift.Int {
  case left, right, bottomLeft, bottomRight
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ScrollStyle : Swift.Int {
  case flat, cover, cube
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PresentationStyle : Swift.Int {
  case crossDissolve, modal, zoom
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum Quality : Swift.Int {
  case medium, high
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum GoodsFailure : Swift.Error {
  case refresh
  case close
  public static func == (a: InAppStorySDK_SwiftUI.GoodsFailure, b: InAppStorySDK_SwiftUI.GoodsFailure) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias GoodsComplete = (Swift.Result<Swift.Array<InAppStorySDK_SwiftUI.GoodsObjectProtocol>, InAppStorySDK_SwiftUI.GoodsFailure>) -> Swift.Void
public enum ActionType {
  case button, swipe, game, deeplink
  public static func == (a: InAppStorySDK_SwiftUI.ActionType, b: InAppStorySDK_SwiftUI.ActionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum StoriesType {
  case list(feed: Swift.String?)
  case single
  case onboarding(feed: Swift.String)
}
public protocol InAppStoryDelegate : ObjectiveC.NSObjectProtocol {
  func storiesDidUpdated(isContent: Swift.Bool, from storyType: InAppStorySDK_SwiftUI.StoriesType)
  func storyReader(actionWith target: Swift.String, for type: InAppStorySDK_SwiftUI.ActionType, from storyType: InAppStorySDK_SwiftUI.StoriesType)
  func storyReaderWillShow(with storyType: InAppStorySDK_SwiftUI.StoriesType)
  func storyReaderDidClose(with storyType: InAppStorySDK_SwiftUI.StoriesType)
  func favoriteCellDidSelect()
  func getGoodsObject(with skus: Swift.Array<Swift.String>, complete: @escaping InAppStorySDK_SwiftUI.GoodsComplete)
  func goodItemSelected(_ item: InAppStorySDK_SwiftUI.GoodsObjectProtocol, with storyType: InAppStorySDK_SwiftUI.StoriesType)
}
extension InAppStorySDK_SwiftUI.InAppStoryDelegate {
  public func storyReaderWillShow(with storyType: InAppStorySDK_SwiftUI.StoriesType)
  public func storyReaderDidClose(with storyType: InAppStorySDK_SwiftUI.StoriesType)
  public func favoriteCellDidSelect()
  public func getGoodsObject(with skus: Swift.Array<Swift.String>, complete: @escaping InAppStorySDK_SwiftUI.GoodsComplete)
  public func goodItemSelected(_ item: InAppStorySDK_SwiftUI.GoodsObjectProtocol, with storyType: InAppStorySDK_SwiftUI.StoriesType)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CustomGoodsView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) open func setSKUItems(_ items: Swift.Array<Swift.String>)
  @_Concurrency.MainActor(unsafe) open func setReaderFrame(_ frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) final public func goodsItemClick(with sku: Swift.String)
  @_Concurrency.MainActor(unsafe) final public func close()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CSPhoneFormattedTextField : UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) public var isSelectable: Swift.Bool
  @_Concurrency.MainActor(unsafe) final public let config: InAppStorySDK_SwiftUI.ConfigurationRepo
  @_Concurrency.MainActor(unsafe) public var hasPredictiveInput: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var prefix: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var delegate: UIKit.UITextFieldDelegate? {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) public var textDidChangeBlock: ((_ textField: UIKit.UITextField?) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func phoneNumber() -> Swift.String?
  @_Concurrency.MainActor(unsafe) public func phoneNumberWithoutPrefix() -> Swift.String?
  @_Concurrency.MainActor(unsafe) public var formattedText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class StoryView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var storiesDelegate: InAppStorySDK_SwiftUI.InAppStoryDelegate? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak public var deleagateFlowLayout: InAppStorySDK_SwiftUI.StoryViewDelegateFlowLayout? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isFavoriteView: Swift.Bool
  @_Concurrency.MainActor(unsafe) weak public var target: UIKit.UIViewController? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var storyCell: InAppStorySDK_SwiftUI.StoryCellProtocol! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var favoriteCell: InAppStorySDK_SwiftUI.FavoriteCellProtocol! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isContent: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var panelSettings: InAppStorySDK_SwiftUI.PanelSettings? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(frame: CoreGraphics.CGRect = .zero, feed: Swift.String = "default", favorite: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension InAppStorySDK_SwiftUI.StoryView {
  @_Concurrency.MainActor(unsafe) public func create()
  @_Concurrency.MainActor(unsafe) public func refresh()
}
public let CreateRequest: Foundation.Notification.Name
public let AppendResponse: Foundation.Notification.Name
public let CreateCacheRequest: Foundation.Notification.Name
public let AppendCacheResponse: Foundation.Notification.Name
public protocol GamePlaceholderProtocol : UIKit.UIView {
  func setProgress(progress: Swift.Double)
}
public protocol FavoriteCellProtocol : UIKit.UICollectionViewCell {
  static var reuseIdentifier: Swift.String { get }
  static var nib: UIKit.UINib? { get }
  var favoritesCount: Swift.Int { get set }
  func setHighlight(_ value: Swift.Bool)
  func setImages(_ urls: Swift.Array<Foundation.URL?>)
  func setImagesColors(_ colors: Swift.Array<UIKit.UIColor?>)
  func setBackgroundColor(_ color: UIKit.UIColor)
}
public protocol GoodsCellProtocol : UIKit.UICollectionViewCell {
  static var reuseIdentifier: Swift.String { get }
  static var nib: UIKit.UINib? { get }
  func setGoodObject(_ object: InAppStorySDK_SwiftUI.GoodsObjectProtocol!)
}
extension InAppStorySDK_SwiftUI.ClosePosition : Swift.Equatable {}
extension InAppStorySDK_SwiftUI.ClosePosition : Swift.Hashable {}
extension InAppStorySDK_SwiftUI.ClosePosition : Swift.RawRepresentable {}
extension InAppStorySDK_SwiftUI.ScrollStyle : Swift.Equatable {}
extension InAppStorySDK_SwiftUI.ScrollStyle : Swift.Hashable {}
extension InAppStorySDK_SwiftUI.ScrollStyle : Swift.RawRepresentable {}
extension InAppStorySDK_SwiftUI.PresentationStyle : Swift.Equatable {}
extension InAppStorySDK_SwiftUI.PresentationStyle : Swift.Hashable {}
extension InAppStorySDK_SwiftUI.PresentationStyle : Swift.RawRepresentable {}
extension InAppStorySDK_SwiftUI.Quality : Swift.Equatable {}
extension InAppStorySDK_SwiftUI.Quality : Swift.Hashable {}
extension InAppStorySDK_SwiftUI.Quality : Swift.RawRepresentable {}
extension InAppStorySDK_SwiftUI.GoodsFailure : Swift.Equatable {}
extension InAppStorySDK_SwiftUI.GoodsFailure : Swift.Hashable {}
extension InAppStorySDK_SwiftUI.ActionType : Swift.Equatable {}
extension InAppStorySDK_SwiftUI.ActionType : Swift.Hashable {}
