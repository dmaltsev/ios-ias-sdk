// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name InAppStorySDK
import AVFoundation
import AudioToolbox
import CommonCrypto
import Compression
import CoreFoundation
import CoreHaptics
import CoreText
import Foundation
import ImageIO
@_exported import InAppStorySDK
import Photos
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import os
public struct PhoneFormat {
  public let phoneFormat: Swift.String
  public let regexp: Swift.String
  public init(defaultPhoneFormat: Swift.String)
  public init(phoneFormat: Swift.String, regexp: Swift.String)
}
@_hasMissingDesignatedInitializers public class Game {
  public var id: Swift.String?
  public init(id: Swift.String)
  @objc deinit
}
public struct WidgetStory {
  public let id: Swift.String
  public let title: Swift.String
  public let image: Swift.String
  public let color: Swift.String
}
public let StoriesLoaded: Foundation.Notification.Name
public let UGCStoriesLoaded: Foundation.Notification.Name
public let ClickOnStory: Foundation.Notification.Name
public let ShowStory: Foundation.Notification.Name
public let CloseStory: Foundation.Notification.Name
public let ClickOnButton: Foundation.Notification.Name
public let ShowSlide: Foundation.Notification.Name
public let LikeStory: Foundation.Notification.Name
public let DislikeStory: Foundation.Notification.Name
public let FavoriteStory: Foundation.Notification.Name
public let ClickOnShareStory: Foundation.Notification.Name
public let StoryWidgetEvent: Foundation.Notification.Name
public let StartGame: Foundation.Notification.Name
public let CloseGame: Foundation.Notification.Name
public let FinishGame: Foundation.Notification.Name
public let SessionFailure: Foundation.Notification.Name
public let StoryFailure: Foundation.Notification.Name
public let CurrentStoryFailure: Foundation.Notification.Name
public let NetworkFailure: Foundation.Notification.Name
public let RequestFailure: Foundation.Notification.Name
public struct Settings : Swift.Equatable {
  public var userID: Swift.String
  public var tags: Swift.Array<Swift.String> {
    get
    set
  }
  public init(userID: Swift.String, tags: Swift.Array<Swift.String> = [String]())
  public static func == (lhs: InAppStorySDK.Settings, rhs: InAppStorySDK.Settings) -> Swift.Bool
}
public struct PanelSettings {
  public var like: Swift.Bool
  public var favorites: Swift.Bool
  public var share: Swift.Bool
  public init(like: Swift.Bool = false, favorites: Swift.Bool = false, share: Swift.Bool = false)
}
public struct SharingObject {
  public let text: Swift.String?
  public let images: Swift.Array<UIKit.UIImage>?
  public let link: Swift.String?
  public let payload: Swift.String?
  public init(text: Swift.String?, images: Swift.Array<UIKit.UIImage>?, link: Swift.String?, payload: Swift.String?)
}
public struct EditorCellSettings {
}
public struct TimersGradient {
  public var colors: Swift.Array<UIKit.UIColor>
  public var startPoint: CoreGraphics.CGPoint
  public var endPoint: CoreGraphics.CGPoint
  public var locations: Swift.Array<Swift.Double>
  public var height: Swift.Double
  public init(colors: Swift.Array<UIKit.UIColor> = [UIColor(white: 0.0, alpha: 0.0), UIColor(white: 0.0, alpha: 0.1)], startPoint: CoreGraphics.CGPoint = CGPoint(x: 0.5, y: 1.0), endPoint: CoreGraphics.CGPoint = CGPoint(x: 0.5, y: 0.0), locations: Swift.Array<Swift.Double> = [0, 1], height: Swift.Double = 200.0)
}
@objc @_inheritsConvenienceInitializers public class InAppStory : ObjectiveC.NSObject {
  public static var shared: InAppStorySDK.InAppStory
  public static let VersionSDK: Swift.String
  public static let BuildSDK: Swift.String
  public static var frameworkInfo: Swift.String {
    get
  }
  public var settings: InAppStorySDK.Settings? {
    get
    set
  }
  public var favoritesCount: Swift.Int {
    get
  }
  public var editorCellSettings: InAppStorySDK.EditorCellSettings?
  public var widgetStories: [InAppStorySDK.WidgetStory]
  public var sslPinningHashKeys: [Swift.String]?
  public var coverQuality: InAppStorySDK.Quality
  public var showCellTitle: Swift.Bool
  public var cellGradientEnabled: Swift.Bool
  public var cellBorderRadius: CoreGraphics.CGFloat
  public var cellBorderColor: UIKit.UIColor
  public var goodsCellMainTextColor: UIKit.UIColor
  public var goodsCellDiscountTextColor: UIKit.UIColor
  public var cellFont: UIKit.UIFont
  public var goodCellTitleFont: UIKit.UIFont
  public var goodCellSubtitleFont: UIKit.UIFont
  public var goodCellPriceFont: UIKit.UIFont
  public var goodCellDiscountFont: UIKit.UIFont
  public var timerGradientEnable: Swift.Bool
  public var swipeToClose: Swift.Bool
  public var overScrollToClose: Swift.Bool
  public var timerGradient: InAppStorySDK.TimersGradient
  public var placeholderElementColor: UIKit.UIColor
  public var placeholderBackgroundColor: UIKit.UIColor
  public var readerBackgroundColor: UIKit.UIColor
  public var readerCornerRadius: CoreGraphics.CGFloat
  public var goodsCloseBackgroundColor: UIKit.UIColor
  public var goodsSubstrateColor: UIKit.UIColor
  public var gamePlaceholderTint: UIKit.UIColor
  public var likeImage: UIKit.UIImage
  public var likeSelectedImage: UIKit.UIImage
  public var dislikeImage: UIKit.UIImage
  public var dislikeSelectedImage: UIKit.UIImage
  public var favoriteImage: UIKit.UIImage
  public var favoriteSelectedImag: UIKit.UIImage
  public var shareImage: UIKit.UIImage
  public var shareSelectedImage: UIKit.UIImage
  public var soundImage: UIKit.UIImage
  public var soundSelectedImage: UIKit.UIImage
  public var closeReaderImage: UIKit.UIImage
  public var refreshImage: UIKit.UIImage
  public var refreshGoodsImage: UIKit.UIImage
  public var goodsCloseImage: UIKit.UIImage
  public var panelSettings: InAppStorySDK.PanelSettings?
  public var goodCell: InAppStorySDK.GoodsCellProtocol?
  public var placeholderView: InAppStorySDK.PlaceholderProtocol?
  public var gamePlaceholderView: InAppStorySDK.DownloadPlaceholderProtocol?
  public var goodsView: InAppStorySDK.CustomGoodsView?
  public var goodsDelegateFlowLayout: InAppStorySDK.GoodsDelegateFlowLayout?
  public var closeButtonPosition: InAppStorySDK.ClosePosition
  public var scrollStyle: InAppStorySDK.ScrollStyle
  public var presentationStyle: InAppStorySDK.PresentationStyle
  public var muted: Swift.Bool {
    get
    set
  }
  public var placeholders: [Swift.String : Swift.String] {
    get
    set
  }
  public var imagesPlaceholders: [Swift.String : Swift.String] {
    get
    set
  }
  public var isReaderOpen: Swift.Bool {
    get
  }
  public var isLoggingEnabled: Swift.Bool
  public var customShare: ((InAppStorySDK.SharingObject, @escaping ((Swift.Bool) -> Swift.Void)) -> Swift.Void)?
  public var gameComplete: ((_ data: Swift.String, _ result: Swift.Dictionary<Swift.String, Any>?, _ url: Swift.String?) -> Swift.Void)?
  public var storiesDidUpdated: ((_ isContent: Swift.Bool, _ storyType: InAppStorySDK.StoriesType) -> Swift.Void)?
  public var onActionWith: ((_ target: Swift.String, _ type: InAppStorySDK.ActionType, _ storyType: InAppStorySDK.StoriesType?) -> Swift.Void)?
  public var storyReaderWillShow: ((_ storyType: InAppStorySDK.StoriesType) -> Swift.Void)?
  public var storyReaderDidClose: ((_ storyType: InAppStorySDK.StoriesType) -> Swift.Void)?
  public var favoriteCellDidSelect: (() -> Swift.Void)?
  public var editorCellDidSelect: (() -> Swift.Void)?
  public var getGoodsObject: ((_ skus: Swift.Array<Swift.String>, _ complete: @escaping InAppStorySDK.GoodsComplete) -> Swift.Void)?
  public var goodItemSelected: ((_ item: InAppStorySDK.GoodsObjectProtocol, _ storyType: InAppStorySDK.StoriesType?) -> Swift.Void)?
  public var sizeForItem: (() -> CoreGraphics.CGSize)?
  public var insetForSection: (() -> UIKit.UIEdgeInsets)?
  public var minimumLineSpacingForSection: (() -> CoreGraphics.CGFloat)?
  public var minimumInteritemSpacingForSection: (() -> CoreGraphics.CGFloat)?
  public var goodsSizeForItem: (() -> CoreGraphics.CGSize)?
  public var goodsInsetForSection: (() -> UIKit.UIEdgeInsets)?
  public var goodsMinimumLineSpacingForSection: (() -> CoreGraphics.CGFloat)?
  public func initWith(serviceKey: Swift.String, testKey: Swift.String? = nil, settings: InAppStorySDK.Settings? = nil)
  public func setTags(_ tags: Swift.Array<Swift.String>)
  public func addTags(_ addedTags: Swift.Array<Swift.String>)
  public func removeTags(_ removingTags: Swift.Array<Swift.String>)
  public func getWidgetStories(complete: @escaping (Swift.Array<InAppStorySDK.WidgetStory>?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
extension InAppStorySDK.InAppStory {
  public func clearMemory()
  public func clearCache()
  public func closeReader(complete: @escaping () -> Swift.Void)
}
extension InAppStorySDK.InAppStory {
  public func showOnboardings(feed: Swift.String = "onboarding", limit: Swift.Int = 0, from target: UIKit.UIViewController, with tags: [Swift.String]? = nil, with panelSettings: InAppStorySDK.PanelSettings? = nil, complete: @escaping (_ show: Swift.Bool) -> Swift.Void)
  @available(*, deprecated, renamed: "showOnboardings(feed:limit:from:with:with:complete:)")
  public func showOnboardings(feed: Swift.String = "onboarding", limit: Swift.Int = 0, from target: UIKit.UIViewController, with tags: [Swift.String]? = nil, delegate: InAppStorySDK.InAppStoryDelegate, with panelSettings: InAppStorySDK.PanelSettings? = nil, complete: @escaping (_ show: Swift.Bool) -> Swift.Void)
}
extension InAppStorySDK.InAppStory {
  public func present(controller presentingViewController: UIKit.UIViewController, for presentationStyle: UIKit.UIModalPresentationStyle = .overCurrentContext, with transitionStyle: UIKit.UIModalTransitionStyle = .coverVertical)
}
extension InAppStorySDK.InAppStory {
  public func openGame(with game: InAppStorySDK.Game, complete: ((_ opened: Swift.Bool) -> Swift.Void)? = nil)
  public func closeGame()
}
extension InAppStorySDK.InAppStory {
  public func showSingle(with id: Swift.String, from target: UIKit.UIViewController, with panelSettings: InAppStorySDK.PanelSettings? = nil, complete: @escaping (_ show: Swift.Bool) -> Swift.Void)
  @available(*, deprecated, renamed: "showSingle(with:from:with:complete:)")
  public func showSingle(with id: Swift.String, from target: UIKit.UIViewController, delegate: InAppStorySDK.InAppStoryDelegate, with panelSettings: InAppStorySDK.PanelSettings? = nil, complete: @escaping (_ show: Swift.Bool) -> Swift.Void)
}
extension InAppStorySDK.InAppStory {
  public func removeFromFavorite(with storyID: Swift.String)
  public func removeAllFavorites()
}
public func MD5(_ input: Swift.String) -> Swift.String
@_hasMissingDesignatedInitializers final public class ConfigurationRepo {
  final public var defaultConfiguration: InAppStorySDK.PhoneFormat
  final public func add(format: InAppStorySDK.PhoneFormat)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class StoryUGCView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var storiesDelegate: InAppStorySDK.InAppStoryDelegate? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak public var delegateFlowLayout: InAppStorySDK.StoryViewDelegateFlowLayout? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak public var target: UIKit.UIViewController? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var editorCell: InAppStorySDK.EditorCellProtocol! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var storyCell: InAppStorySDK.StoryCellProtocol! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isContent: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isEditorEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var direction: InAppStorySDK.ListDirection {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var storiesDidUpdated: ((_ isContent: Swift.Bool, _ storyType: InAppStorySDK.StoriesType) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var onActionWith: ((_ target: Swift.String, _ type: InAppStorySDK.ActionType, _ storyType: InAppStorySDK.StoriesType) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var storyReaderWillShow: ((_ storyType: InAppStorySDK.StoriesType) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var storyReaderDidClose: ((_ storyType: InAppStorySDK.StoriesType) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var favoriteCellDidSelect: (() -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var editorCellDidSelect: (() -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var getGoodsObject: ((_ skus: Swift.Array<Swift.String>, _ complete: @escaping InAppStorySDK.GoodsComplete) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var goodItemSelected: ((_ item: InAppStorySDK.GoodsObjectProtocol, _ storyType: InAppStorySDK.StoriesType) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var sizeForItem: (() -> CoreGraphics.CGSize)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var insetForSection: (() -> UIKit.UIEdgeInsets)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var minimumLineSpacingForSection: (() -> CoreGraphics.CGFloat)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var minimumInteritemSpacingForSection: (() -> CoreGraphics.CGFloat)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(frame: CoreGraphics.CGRect = .zero, filter: Swift.Dictionary<Swift.String, Any> = [:])
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension InAppStorySDK.StoryUGCView {
  @_Concurrency.MainActor(unsafe) public func create()
  @_Concurrency.MainActor(unsafe) public func refresh()
}
public protocol GoodsObjectProtocol : ObjectiveC.NSObjectProtocol {
  var sku: Swift.String! { get set }
}
@objc public class GoodObject : ObjectiveC.NSObject, InAppStorySDK.GoodsObjectProtocol {
  public var sku: Swift.String!
  public var title: Swift.String?
  public var subtitle: Swift.String?
  public var imageURL: Foundation.URL?
  public var price: Swift.String?
  public var discount: Swift.String?
  public init(sku: Swift.String, title: Swift.String?, subtitle: Swift.String?, imageURL: Foundation.URL?, price: Swift.String?, discount: Swift.String?)
  @objc deinit
}
@available(*, deprecated, message: "SDK is phasing out the use of delegates and moving towards the use of closures. More info can be found in the migration guide for version 1.22.x documentation.")
public protocol GoodsDelegateFlowLayout : ObjectiveC.NSObjectProtocol {
  func sizeForItem() -> CoreGraphics.CGSize
  func insetForSection() -> UIKit.UIEdgeInsets
  func minimumLineSpacingForSection() -> CoreGraphics.CGFloat
}
extension InAppStorySDK.GoodsDelegateFlowLayout {
  public func sizeForItem() -> CoreGraphics.CGSize
  public func insetForSection() -> UIKit.UIEdgeInsets
  public func minimumLineSpacingForSection() -> CoreGraphics.CGFloat
}
public protocol StoryCellProtocol : UIKit.UICollectionViewCell {
  static var reuseIdentifier: Swift.String { get }
  static var nib: UIKit.UINib? { get }
  var storyID: Swift.String! { get set }
  func setTitle(_ text: Swift.String)
  func setImageURL(_ url: Foundation.URL)
  func setVideoURL(_ url: Foundation.URL)
  func setOpened(_ value: Swift.Bool)
  func setHighlight(_ value: Swift.Bool)
  func setBackgroundColor(_ color: UIKit.UIColor)
  func setTitleColor(_ color: UIKit.UIColor)
  func setSound(_ value: Swift.Bool)
}
@available(*, deprecated, message: "SDK is phasing out the use of delegates and moving towards the use of closures. More info can be found in the migration guide for version 1.22.x documentation.")
public protocol StoryViewDelegateFlowLayout : ObjectiveC.NSObjectProtocol {
  func sizeForItem() -> CoreGraphics.CGSize
  func insetForSection() -> UIKit.UIEdgeInsets
  func minimumLineSpacingForSection() -> CoreGraphics.CGFloat
  func minimumInteritemSpacingForSection() -> CoreGraphics.CGFloat
}
public protocol PlaceholderProtocol : UIKit.UIView {
  var isAnimate: Swift.Bool { get }
  func start()
  func stop()
}
public protocol EditorCellProtocol : UIKit.UICollectionViewCell {
  static var reuseIdentifier: Swift.String { get }
  static var nib: UIKit.UINib? { get }
}
@objc public enum ClosePosition : Swift.Int {
  case left, right, bottomLeft, bottomRight
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ScrollStyle : Swift.Int {
  case flat, cover, cube, depth
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PresentationStyle : Swift.Int {
  case crossDissolve, modal, zoom
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum Quality : Swift.Int {
  case medium, high
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum GoodsFailure : Swift.Error {
  case refresh
  case close
  public static func == (a: InAppStorySDK.GoodsFailure, b: InAppStorySDK.GoodsFailure) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias GoodsComplete = (Swift.Result<Swift.Array<InAppStorySDK.GoodsObjectProtocol>, InAppStorySDK.GoodsFailure>) -> Swift.Void
public enum ActionType {
  case button, swipe, game, deeplink
  public static func == (a: InAppStorySDK.ActionType, b: InAppStorySDK.ActionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum StoriesType {
  case list(feed: Swift.String?)
  case ugcList
  case single
  case onboarding(feed: Swift.String)
}
@available(*, deprecated, message: "SDK is phasing out the use of delegates and moving towards the use of closures. More info can be found in the migration guide for version 1.22.x documentation.")
public protocol InAppStoryDelegate : ObjectiveC.NSObjectProtocol {
  func storiesDidUpdated(isContent: Swift.Bool, from storyType: InAppStorySDK.StoriesType)
  func storyReader(actionWith target: Swift.String, for type: InAppStorySDK.ActionType, from storyType: InAppStorySDK.StoriesType)
  func storyReaderWillShow(with storyType: InAppStorySDK.StoriesType)
  func storyReaderDidClose(with storyType: InAppStorySDK.StoriesType)
  func favoriteCellDidSelect()
  func editorCellDidSelect()
  func getGoodsObject(with skus: Swift.Array<Swift.String>, complete: @escaping InAppStorySDK.GoodsComplete)
  func goodItemSelected(_ item: InAppStorySDK.GoodsObjectProtocol, with storyType: InAppStorySDK.StoriesType)
}
extension InAppStorySDK.InAppStoryDelegate {
  public func storyReaderWillShow(with storyType: InAppStorySDK.StoriesType)
  public func storyReaderDidClose(with storyType: InAppStorySDK.StoriesType)
  public func favoriteCellDidSelect()
  public func editorCellDidSelect()
  public func getGoodsObject(with skus: Swift.Array<Swift.String>, complete: @escaping InAppStorySDK.GoodsComplete)
  public func goodItemSelected(_ item: InAppStorySDK.GoodsObjectProtocol, with storyType: InAppStorySDK.StoriesType)
}
public enum ListDirection {
  case horizontal(rows: Swift.Int = 1)
  case vertical(colums: Swift.Int = 3)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CustomGoodsView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) open func setSKUItems(_ items: Swift.Array<Swift.String>)
  @_Concurrency.MainActor(unsafe) open func setReaderFrame(_ frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) final public func goodsItemClick(with sku: Swift.String)
  @_Concurrency.MainActor(unsafe) final public func close()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CSPhoneFormattedTextField : UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) public var isSelectable: Swift.Bool
  @_Concurrency.MainActor(unsafe) final public let config: InAppStorySDK.ConfigurationRepo
  @_Concurrency.MainActor(unsafe) public var hasPredictiveInput: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var prefix: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var delegate: UIKit.UITextFieldDelegate? {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) public var textDidChangeBlock: ((_ textField: UIKit.UITextField?) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func phoneNumber() -> Swift.String?
  @_Concurrency.MainActor(unsafe) public func phoneNumberWithoutPrefix() -> Swift.String?
  @_Concurrency.MainActor(unsafe) public var formattedText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @objc deinit
}
public let CreateRequest: Foundation.Notification.Name
public let AppendResponse: Foundation.Notification.Name
public let CreateCacheRequest: Foundation.Notification.Name
public let AppendCacheResponse: Foundation.Notification.Name
@available(*, unavailable, renamed: "DownloadPlaceholderProtocol")
public protocol GamePlaceholderProtocol : UIKit.UIView {
  func setProgress(progress: Swift.Double)
}
public protocol DownloadPlaceholderProtocol : UIKit.UIView {
  func setProgress(progress: Swift.Double)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class StoryView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var storiesDelegate: InAppStorySDK.InAppStoryDelegate? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak public var delegateFlowLayout: InAppStorySDK.StoryViewDelegateFlowLayout? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isFavoriteView: Swift.Bool
  @_Concurrency.MainActor(unsafe) weak public var target: UIKit.UIViewController? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var editorCell: InAppStorySDK.EditorCellProtocol! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var storyCell: InAppStorySDK.StoryCellProtocol! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var favoriteCell: InAppStorySDK.FavoriteCellProtocol! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isContent: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var panelSettings: InAppStorySDK.PanelSettings? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isEditorEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var direction: InAppStorySDK.ListDirection {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var storiesDidUpdated: ((_ isContent: Swift.Bool, _ storyType: InAppStorySDK.StoriesType) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var onActionWith: ((_ target: Swift.String, _ type: InAppStorySDK.ActionType, _ storyType: InAppStorySDK.StoriesType) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var storyReaderWillShow: ((_ storyType: InAppStorySDK.StoriesType) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var storyReaderDidClose: ((_ storyType: InAppStorySDK.StoriesType) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var favoriteCellDidSelect: (() -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var editorCellDidSelect: (() -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var getGoodsObject: ((_ skus: Swift.Array<Swift.String>, _ complete: @escaping InAppStorySDK.GoodsComplete) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var goodItemSelected: ((_ item: InAppStorySDK.GoodsObjectProtocol, _ storyType: InAppStorySDK.StoriesType) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var sizeForItem: (() -> CoreGraphics.CGSize)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var insetForSection: (() -> UIKit.UIEdgeInsets)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var minimumLineSpacingForSection: (() -> CoreGraphics.CGFloat)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var minimumInteritemSpacingForSection: (() -> CoreGraphics.CGFloat)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(frame: CoreGraphics.CGRect = .zero, feed: Swift.String = "default", favorite: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension InAppStorySDK.StoryView {
  @_Concurrency.MainActor(unsafe) public func create()
  @_Concurrency.MainActor(unsafe) public func refresh()
}
extension UIKit.UICollectionViewFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var flipsHorizontallyInOppositeLayoutDirection: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
}
public protocol FavoriteCellProtocol : UIKit.UICollectionViewCell {
  static var reuseIdentifier: Swift.String { get }
  static var nib: UIKit.UINib? { get }
  var favoritesCount: Swift.Int { get set }
  func setHighlight(_ value: Swift.Bool)
  func setImages(_ urls: Swift.Array<Foundation.URL?>)
  func setImagesColors(_ colors: Swift.Array<UIKit.UIColor?>)
  func setBackgroundColor(_ color: UIKit.UIColor)
}
public protocol GoodsCellProtocol : UIKit.UICollectionViewCell {
  static var reuseIdentifier: Swift.String { get }
  static var nib: UIKit.UINib? { get }
  func setGoodObject(_ object: InAppStorySDK.GoodsObjectProtocol!)
}
extension InAppStorySDK.ClosePosition : Swift.Equatable {}
extension InAppStorySDK.ClosePosition : Swift.Hashable {}
extension InAppStorySDK.ClosePosition : Swift.RawRepresentable {}
extension InAppStorySDK.ScrollStyle : Swift.Equatable {}
extension InAppStorySDK.ScrollStyle : Swift.Hashable {}
extension InAppStorySDK.ScrollStyle : Swift.RawRepresentable {}
extension InAppStorySDK.PresentationStyle : Swift.Equatable {}
extension InAppStorySDK.PresentationStyle : Swift.Hashable {}
extension InAppStorySDK.PresentationStyle : Swift.RawRepresentable {}
extension InAppStorySDK.Quality : Swift.Equatable {}
extension InAppStorySDK.Quality : Swift.Hashable {}
extension InAppStorySDK.Quality : Swift.RawRepresentable {}
extension InAppStorySDK.GoodsFailure : Swift.Equatable {}
extension InAppStorySDK.GoodsFailure : Swift.Hashable {}
extension InAppStorySDK.ActionType : Swift.Equatable {}
extension InAppStorySDK.ActionType : Swift.Hashable {}
